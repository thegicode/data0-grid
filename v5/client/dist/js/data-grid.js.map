{
  "version": 3,
  "sources": ["../../src/scripts/components/dataCells/DataCellBase.ts", "../../src/scripts/components/dataCells/CheckboxCell.ts", "../../src/scripts/components/dataCells/DatalistCell.ts", "../../src/scripts/components/dataCells/SelectCell.ts", "../../src/scripts/components/dataCells/StringCell.ts", "../../src/scripts/components/dataCells/TextNumberCell.ts", "../../src/scripts/data/data.ts", "../../src/scripts/components/Selection.ts", "../../src/scripts/components/models/DataModel.ts", "../../src/scripts/data/fieldDefinitions.ts", "../../src/scripts/components/Cell.ts", "../../src/scripts/components/Thead.ts", "../../src/scripts/components/Table.ts", "../../src/scripts/components/helpers/handleCsvButton.ts", "../../src/scripts/components/helpers/clipboard.ts", "../../src/scripts/components/DataGrid.ts", "../../src/scripts/pages/data-grid.ts"],
  "sourcesContent": ["import Cell from \"../Cell\";\nimport Selection from \"../Selection\";\nimport DataModel from \"../models/DataModel\";\n\nexport default abstract class DataCellBase extends HTMLElement {\n    public cellController: Cell;\n    public dataModel: DataModel;\n    public selection: Selection;\n\n    protected _type: string;\n    protected _key: string;\n    protected _value: TDataValue;\n    protected _readOnly: boolean;\n    protected _el: TDataCellElement; // _el\uC740 \uAD6C\uCCB4\uC801\uC778 \uD0C0\uC785\uC744 \uC815\uC758\n\n    protected abstract createElement(): TDataCellElement;\n\n    constructor(params: IDataCellParams) {\n        super();\n\n        this.cellController = params.cellController;\n        this.dataModel = params.dataModel;\n        this.selection = params.selection;\n\n        this._type = params.type;\n        this._key = params.key;\n        this._value = params.value;\n\n        this._readOnly = true;\n        this._el = null;\n    }\n\n    get readOnly() {\n        return this._readOnly;\n    }\n\n    set readOnly(value: boolean) {\n        this._readOnly = value;\n        if (this._el instanceof HTMLInputElement) {\n            this._el.readOnly = value; // input \uB610\uB294 select \uC694\uC18C\uC758 readOnly \uC18D\uC131 \uC124\uC815\n        }\n    }\n\n    get key() {\n        return this._key;\n    }\n\n    get type() {\n        return this._type;\n    }\n\n    get value() {\n        return this._value;\n    }\n\n    set value(arg: TDataValue) {\n        this._value = arg;\n\n        if (this._el instanceof (HTMLInputElement || HTMLSelectElement)) {\n            this._el.value = arg.toString();\n        }\n    }\n\n    get currentInputValue() {\n        if (this._el instanceof (HTMLInputElement || HTMLSelectElement)) {\n            if (this._type === \"number\") {\n                return Number(this._el.value);\n            } else if (this._type === \"checkbox\") {\n                return (this._el as HTMLInputElement).checked;\n            } else {\n                return this._el.value;\n            }\n        }\n    }\n\n    focus() {\n        this._el?.focus();\n    }\n\n    blur() {\n        this._el?.blur();\n    }\n\n    connectedCallback() {\n        this.render();\n        this.addEventListener(\"change\", this.onChange.bind(this));\n        this.addEventListener(\"keydown\", this.onKeyDown.bind(this));\n    }\n\n    render() {\n        this._el = this.createElement();\n        if (this._el) {\n            this.appendChild(this._el);\n        }\n    }\n\n    onChange(e: Event) {\n        const newValue = this.currentInputValue;\n        if (newValue === null || newValue === undefined) return;\n\n        if (this._value !== newValue) {\n            this.value = newValue;\n            this.updateData();\n        }\n    }\n\n    onKeyDown(e: KeyboardEvent) {\n        const cells = this.selection.selectedCells;\n        if (!cells.size) return;\n\n        const isEditing = this.readOnly === false;\n        const arrowKeys = [\"ArrowUp\", \"ArrowDown\", \"ArrowLeft\", \"ArrowRight\"];\n\n        if (isEditing) {\n            switch (e.key) {\n                case \"Enter\":\n                    e.preventDefault();\n                    this.readOnly = true;\n                    const nextCell = this.moveUpDown(e.shiftKey);\n                    if (!nextCell) return;\n                    nextCell.instance.readOnly =\n                        this._type === \"checkbox\" ? false : true;\n                    break;\n                case \"Tab\":\n                    e.preventDefault();\n                    this.blur();\n                    this.readOnly = true;\n                    this.moveSide(e.shiftKey);\n                    break;\n                case \"Escape\":\n                    e.preventDefault();\n                    this.value = this._value;\n                    this.readOnly = true;\n                    break;\n            }\n\n            if (this._type === \"checkbox\" && arrowKeys.includes(e.key)) {\n                this.handleArrowKey(e);\n            }\n        } else {\n            switch (e.key) {\n                case \"Enter\":\n                    e.preventDefault();\n                    if (this._type === \"string\") {\n                        this.moveUpDown(e.shiftKey);\n                    } else {\n                        this.readOnly = false;\n                        this.focus();\n                    }\n                    break;\n                case \"Tab\":\n                    e.preventDefault();\n                    this.moveSide(e.shiftKey);\n                    break;\n            }\n\n            if (arrowKeys.includes(e.key)) {\n                this.handleArrowKey(e);\n            }\n        }\n    }\n\n    moveUpDown(shiftKey: boolean) {\n        if (shiftKey) {\n            return this.selection.moveTo(\n                this.cellController.row - 1,\n                this.cellController.col\n            );\n        } else {\n            return this.selection.moveTo(\n                this.cellController.row + 1,\n                this.cellController.col\n            );\n        }\n    }\n\n    moveSide(shiftKey: boolean) {\n        if (shiftKey) {\n            this.selection.moveTo(\n                this.cellController.row,\n                this.cellController.col - 1\n            );\n        } else {\n            this.selection.moveTo(\n                this.cellController.row,\n                this.cellController.col + 1\n            );\n        }\n    }\n\n    handleArrowKey(e: KeyboardEvent) {\n        e.preventDefault();\n        switch (e.key) {\n            case \"ArrowUp\":\n                this.selection.moveTo(\n                    this.cellController.row - 1,\n                    this.cellController.col\n                );\n                break;\n            case \"ArrowDown\":\n                this.selection.moveTo(\n                    this.cellController.row + 1,\n                    this.cellController.col\n                );\n                break;\n            case \"ArrowLeft\":\n                this.selection.moveTo(\n                    this.cellController.row,\n                    this.cellController.col - 1\n                );\n                break;\n            case \"ArrowRight\":\n                this.selection.moveTo(\n                    this.cellController.row,\n                    this.cellController.col + 1\n                );\n                break;\n        }\n    }\n\n    updateData() {\n        const id = this.getId();\n        if (id) {\n            this.dataModel.updateFieldValue(id, this._key, this.value);\n        }\n    }\n\n    getId(): string | null {\n        const row = this.closest(\"tr\");\n        if (!row) return null;\n        return row.dataset.id || null;\n    }\n}\n", "import DataCellBase from \"./DataCellBase.js\";\n\nexport default class CheckboxCell extends DataCellBase {\n    protected _el: HTMLInputElement | null = null;\n\n    constructor(params: IDataCellParams) {\n        super(params);\n    }\n\n    get readOnly() {\n        return this._readOnly;\n    }\n\n    set readOnly(value) {\n        this._readOnly = Boolean(value);\n        if (this._el) this._el.ariaReadOnly = String(Boolean(value));\n    }\n\n    createElement() {\n        const input = document.createElement(\"input\");\n        input.type = \"checkbox\";\n        input.checked = this.isTrue();\n        input.ariaReadOnly = this._readOnly.toString();\n        return input;\n    }\n\n    isTrue() {\n        return (\n            this._value === true ||\n            Boolean(this._value === \"true\") ||\n            Boolean(this._value === \"on\")\n        );\n    }\n}\n", "import DataCellBase from \"./DataCellBase.js\";\n\nexport default class DatalistCell extends DataCellBase {\n    private _dataListID: string;\n\n    private _isFix: boolean;\n\n    constructor(params: IDataCellParams, isFix = false) {\n        super(params);\n        this._isFix = isFix;\n        this._dataListID = `datalist-${this._key}`;\n    }\n\n    get getAvailableOptions() {\n        const keyString = this._key;\n        return this.dataModel.getValuesForKey(keyString);\n    }\n\n    get currentInputValue() {\n        if (this._el instanceof HTMLInputElement) {\n            if (\n                this._isFix &&\n                !this.getAvailableOptions.includes(this._el.value)\n            ) {\n                this._el.value = this._value.toString();\n            } else return this._el.value;\n        }\n    }\n\n    createElement() {\n        const input = document.createElement(\"input\");\n        input.type = \"text\";\n        input.setAttribute(\"list\", this._dataListID);\n        input.value = this._value.toString();\n        input.readOnly = true;\n        return input;\n    }\n}\n", "import DataCellBase from \"./DataCellBase.js\";\n\nexport default class SelectCell extends DataCellBase {\n    protected _el: HTMLSelectElement | null = null;\n\n    constructor(params: IDataCellParams) {\n        super(params);\n    }\n\n    get readOnly() {\n        return this._readOnly;\n    }\n\n    set readOnly(value) {\n        this._readOnly = value;\n        if (this._el) this._el.ariaReadOnly = value.toString();\n    }\n\n    createElement() {\n        const select = document.createElement(\"select\");\n        const fragment = new DocumentFragment();\n        this.dataModel.records\n            .map((data) => this.createOptionElement(data))\n            .forEach((optionElement) => fragment.appendChild(optionElement));\n        select.appendChild(fragment);\n        select.ariaReadOnly = \"true\";\n        select.value = this._value.toString();\n        return select;\n    }\n\n    createOptionElement(data: IDataItem) {\n        const text = data[this._key as keyof IDataItem];\n        const option = document.createElement(\"option\");\n        option.value = text.toString();\n        option.textContent = text.toString();\n        return option;\n    }\n\n    onChange(e: Event) {\n        super.onChange(e);\n\n        this.readOnly = true;\n        const nextCell = this.selection.moveTo(\n            this.cellController.row + 1,\n            this.cellController.col\n        );\n        if (nextCell) {\n            nextCell.instance.readOnly = false;\n        }\n    }\n}\n", "import DataCellBase from \"./DataCellBase.js\";\n\nexport default class StringCell extends DataCellBase {\n    constructor(params: IDataCellParams) {\n        super(params);\n    }\n\n    // Don't remove\n    get value() {\n        return this._value;\n    }\n\n    // Don't remove\n    set value(arg) {\n        // can't set value\n    }\n\n    createElement() {\n        const span = document.createElement(\"span\");\n        span.textContent = this._value.toString();\n        span.className = \"text\";\n        span.tabIndex = 0;\n        return span;\n    }\n}\n", "import DataCellBase from \"./DataCellBase\";\n\nexport default class TextNumberCell extends DataCellBase {\n    constructor(params: IDataCellParams) {\n        super(params);\n    }\n\n    createElement() {\n        const input = document.createElement(\"input\");\n        input.type = this._type;\n        input.value = this._value.toString();\n        input.readOnly = this._readOnly;\n        return input;\n    }\n}\n", "export const INITIAL_DATA: IDataItem[] = [\n    {\n        id: \"a-1\",\n        name: \"name1\",\n        description: \"description1\",\n        quantity: 1,\n        food: \"food-1\",\n        food_fix: \"food_fix-1\",\n        vegetable: \"vegetable1\",\n        option: true,\n        ref: \"ref1\",\n    },\n    {\n        id: \"a-2\",\n        name: \"name2\",\n        description: \"description2\",\n        quantity: 2,\n        food: \"food-2\",\n        food_fix: \"food_fix-2\",\n        vegetable: \"vegetable2\",\n        option: true,\n        ref: \"ref2\",\n    },\n    {\n        id: \"a-3\",\n        name: \"name3\",\n        description: \"description3\",\n        quantity: 3,\n        food: \"food-3\",\n        food_fix: \"food_fix-3\",\n        vegetable: \"vegetable3\",\n        option: false,\n        ref: \"ref3\",\n    },\n    {\n        id: \"a-4\",\n        name: \"name4\",\n        description: \"description4\",\n        quantity: 4,\n        food: \"food-4\",\n        food_fix: \"food_fix-4\",\n        vegetable: \"vegetable4\",\n        option: false,\n        ref: \"ref4\",\n    },\n    {\n        id: \"a-5\",\n        name: \"name5\",\n        description: \"description5\",\n        quantity: 5,\n        food: \"food-5\",\n        food_fix: \"food_fix-5\",\n        vegetable: \"vegetable5\",\n        option: true,\n        ref: \"ref5\",\n    },\n];\n", "import DataGrid from \"./DataGrid\";\n\nexport default class Selection {\n    public dataGrid: DataGrid;\n\n    private _selectedCells: Set<IHTMLTableCellElementWithInstance>;\n    private _currentSelectionRange: IHTMLTableCellElementWithInstance[][];\n    private _isRangeSelecting: boolean;\n    private _rangeSelectingStart: IHTMLTableCellElementWithInstance | null;\n    private _copiedCells: IHTMLTableCellElementWithInstance[];\n\n    constructor(dataGrid: DataGrid) {\n        this.dataGrid = dataGrid;\n\n        this._selectedCells = new Set();\n        this._currentSelectionRange = [];\n        this._isRangeSelecting = false;\n        this._rangeSelectingStart = null;\n\n        this._copiedCells = [];\n    }\n\n    get selectedCells(): Set<IHTMLTableCellElementWithInstance> {\n        return this._selectedCells;\n    }\n\n    set selectedCells(value: Set<IHTMLTableCellElementWithInstance>) {\n        this._selectedCells = value;\n    }\n\n    get currentSelectionRange(): IHTMLTableCellElementWithInstance[][] {\n        return this._currentSelectionRange;\n    }\n\n    get isRangeSelecting(): boolean {\n        return this._isRangeSelecting;\n    }\n\n    set isRangeSelecting(value: boolean) {\n        this._isRangeSelecting = value;\n    }\n\n    get rangeSelectingStart(): IHTMLTableCellElementWithInstance | null {\n        return this._rangeSelectingStart;\n    }\n\n    set rangeSelectingStart(value: IHTMLTableCellElementWithInstance | null) {\n        this._rangeSelectingStart = value;\n    }\n\n    set copiedCell(value: IHTMLTableCellElementWithInstance[]) {\n        this._copiedCells = value;\n    }\n\n    get copiedCell(): IHTMLTableCellElementWithInstance[] {\n        return this._copiedCells;\n    }\n\n    selectCell(cell: IHTMLTableCellElementWithInstance, append = false) {\n        if (!append) {\n            this.clearSelection();\n        }\n\n        this._selectedCells.add(cell);\n        cell.classList.add(\"selected\");\n        cell.instance.focus(); // \uC548\uC804\uD558\uAC8C instance \uC18D\uC131\uC5D0 \uC811\uADFC\n\n        if (cell.instance.type === \"checkbox\") {\n            cell.instance.readOnly = false;\n        }\n    }\n\n    moveTo(row: number, col: number) {\n        const nextCell = this.dataGrid.tbody?.querySelector(\n            `td[data-row=\"${row}\"][data-col=\"${col}\"]`\n        ) as IHTMLTableCellElementWithInstance | null;\n\n        if (nextCell) {\n            this.selectCell(nextCell);\n\n            nextCell.scrollIntoView({\n                behavior: \"smooth\",\n                block: \"center\", // \uC218\uC9C1 \uC815\uB82C\uC744 \uC9C0\uC815\n                inline: \"end\", // \uC218\uD3C9 \uC815\uB82C\uC744 \uC9C0\uC815\n            });\n\n            if (nextCell.instance.type === \"checkbox\") {\n                nextCell.instance.readOnly = false;\n            }\n\n            return nextCell;\n        }\n    }\n\n    selectRange(\n        startCell: IHTMLTableCellElementWithInstance,\n        endCell: IHTMLTableCellElementWithInstance\n    ) {\n        const startRow = startCell.instance.row;\n        const startCol = startCell.instance.col;\n        const endRow = endCell.instance.row;\n        const endCol = endCell.instance.col;\n\n        const minRow = Math.min(startRow, endRow);\n        const maxRow = Math.max(startRow, endRow);\n        const minCol = Math.min(startCol, endCol);\n        const maxCol = Math.max(startCol, endCol);\n\n        this.clearSelection();\n\n        let newSelection: IHTMLTableCellElementWithInstance[][] = [];\n        for (let row = minRow; row <= maxRow; row++) {\n            let rowSelection: IHTMLTableCellElementWithInstance[] = [];\n            for (let col = minCol; col <= maxCol; col++) {\n                const cell = this.dataGrid.tbody?.querySelector(\n                    `td[data-row=\"${row}\"][data-col=\"${col}\"]`\n                ) as IHTMLTableCellElementWithInstance | null;\n                if (cell) {\n                    this.selectCell(cell, true);\n                    rowSelection.push(cell);\n                }\n            }\n            newSelection.push(rowSelection);\n        }\n\n        this._currentSelectionRange = newSelection;\n\n        if (this._selectedCells.size > 1) {\n            this.dataGrid.csvButtonVisible = true;\n        }\n    }\n\n    clearSelection() {\n        this._selectedCells.forEach((cell) => {\n            cell.classList.remove(\"selected\");\n        });\n\n        this._selectedCells.clear();\n\n        const selectedTh = this.dataGrid.querySelector(\".selected-th\");\n        if (selectedTh) {\n            selectedTh.classList.remove(\"selected-th\");\n        }\n    }\n}\n", "export default class DataModel {\n    private _records: IDataItem[] = [];\n\n    constructor(initialData = []) {\n        this._records = Array.isArray(initialData) ? [...initialData] : [];\n    }\n\n    get records() {\n        return this._records.map((item) => ({ ...item }));\n    }\n\n    set records(newData) {\n        if (Array.isArray(newData)) {\n            this._records = newData.map((item) => ({ ...item }));\n        } else {\n            console.error(\"Data must be an array.\");\n        }\n    }\n\n    getValuesForKey(keyString: string) {\n        return this._records.map((r) => r[keyString as keyof IDataItem]);\n    }\n\n    updateFieldValue(id: string, key: string, value: TDataValue) {\n        const index = this._records.findIndex((item) => item.id === id);\n        if (index !== -1) {\n            this._records[index] = {\n                ...this._records[index],\n                [key]: value,\n            };\n            console.log(this.records[index]); // \uC218\uC815\uB41C \uB370\uC774\uD130\uB97C \uCD9C\uB825\uD569\uB2C8\uB2E4.\n        } else {\n            console.error(`Record with id: ${id} not found.`);\n        }\n    }\n\n    updateRecordFields(updateData: IDataItem) {\n        const { id, ...fieldsToUpdate } = updateData;\n        const recordIndex = this._records.findIndex((item) => item.id === id);\n\n        if (recordIndex !== -1) {\n            this._records[recordIndex] = {\n                ...this._records[recordIndex],\n                ...fieldsToUpdate,\n            };\n            console.log(this.records[recordIndex]); // \uC218\uC815\uB41C \uB370\uC774\uD130\uB97C \uCD9C\uB825\uD569\uB2C8\uB2E4.\n        } else {\n            console.error(`Record with id: ${id} not found.`);\n        }\n    }\n\n    // Method to add a new record to the data\n    // addRecord(record) {\n    //     if (record && typeof record === \"object\") {\n    //         this._records.push({ ...record });\n    //     } else {\n    //         console.error(\"Invalid record. Must be an object.\");\n    //     }\n    // }\n\n    // Method to update a record by index\n    // updateRecord(index, updatedRecord) {\n    //     if (index >= 0 && index < this._records.length) {\n    //         this._records[index] = { ...this._records[index], ...updatedRecord };\n    //     } else {\n    //         console.error(\"Invalid index for update.\");\n    //     }\n    // }\n\n    // Method to delete a record by index\n    // deleteRecord(index) {\n    //     if (index >= 0 && index < this._records.length) {\n    //         this._records.splice(index, 1);\n    //     } else {\n    //         console.error(\"Invalid index for deletion.\");\n    //     }\n    // }\n}\n", "export const FIELD_DEFINITIONS = [\n    { key: \"id\", type: \"string\" },\n    { key: \"name\", type: \"text\" },\n    { key: \"description\", type: \"string\" },\n    { key: \"quantity\", type: \"number\" },\n    { key: \"food\", type: \"datalist\" },\n    { key: \"food_fix\", type: \"datalist-fix\" },\n    { key: \"vegetable\", type: \"select\" },\n    { key: \"option\", type: \"checkbox\" },\n    { key: \"ref\", type: \"text\" },\n];\n", "import Selection from \"./Selection\";\nimport DataModel from \"./models/DataModel\";\nimport CheckboxCell from \"./dataCells/CheckboxCell\";\nimport SelectCell from \"./dataCells/SelectCell\";\nimport DatalistCell from \"./dataCells/DatalistCell\";\nimport StringCell from \"./dataCells/StringCell\";\nimport TextNumberCell from \"./dataCells/TextNumberCell\";\nimport Table from \"./Table\";\nimport DataGrid from \"./DataGrid\";\n\nexport default class Cell {\n    public dataGrid: DataGrid;\n    public dataModel: DataModel;\n    public selection: Selection;\n    public tableController: Table;\n\n    private _cell: IHTMLTableCellElementWithInstance | null;\n    private _rowElement: HTMLTableRowElement | null;\n    private _row: number;\n    private _col: number;\n    private _type: string;\n    private _key: string;\n    private _value: TDataValue;\n    private _contentElement: TDataCell | null;\n\n    constructor(\n        tableController: Table,\n        params: ICellParams,\n        row: HTMLTableRowElement\n    ) {\n        this.dataGrid = tableController.dataGrid;\n        this.dataModel = this.dataGrid.dataModel;\n        this.selection = tableController.selection;\n        this.tableController = tableController;\n\n        this._cell = null;\n        this._rowElement = row;\n        this._row = params.row;\n        this._col = params.col;\n        this._type = params.type;\n        this._key = params.key;\n        this._value = params.value;\n        this._contentElement = null;\n\n        this.createCell(params.value); // return \uC81C\uAC70\n    }\n\n    get row() {\n        return this._row;\n    }\n\n    set row(value: number) {\n        if (this._cell) {\n            this._cell.dataset.row = value.toString();\n        }\n        this._row = value;\n    }\n\n    get col() {\n        return this._col;\n    }\n\n    set col(value: number) {\n        if (this._cell) {\n            this._cell.dataset.col = value.toString();\n        }\n        this._col = value;\n    }\n\n    get cellElement() {\n        return this._cell;\n    }\n\n    get contentElement() {\n        return this._contentElement;\n    }\n\n    get readOnly() {\n        return this._contentElement ? this._contentElement.readOnly : true;\n    }\n\n    set readOnly(value: boolean) {\n        if (this._contentElement) {\n            this._contentElement.readOnly = value;\n        }\n    }\n\n    get key() {\n        return this._key;\n    }\n\n    get value() {\n        return this._value;\n    }\n\n    set value(arg: TDataValue) {\n        this._value = arg;\n        if (this._contentElement) {\n            this._contentElement.value = arg;\n        }\n    }\n\n    get type() {\n        return this._type;\n    }\n\n    focus() {\n        if (this._contentElement) {\n            this._contentElement.focus();\n        }\n    }\n\n    createCell(value: TDataValue) {\n        const cell = document.createElement(\n            \"td\"\n        ) as IHTMLTableCellElementWithInstance;\n        cell.dataset.row = this._row.toString();\n        cell.dataset.col = this._col.toString();\n\n        const childElement = this.createChildElement(value);\n        cell.appendChild(childElement);\n\n        this._contentElement = childElement;\n        this._cell = cell;\n\n        this.bindEvents();\n\n        // Store the Cell instance reference in the DOM element\n        (cell as IHTMLTableCellElementWithInstance).instance = this;\n\n        this.setRowId(value);\n    }\n\n    setRowId(value: TDataValue) {\n        if (this._key === \"id\" && this._rowElement) {\n            this._rowElement.dataset.id = value.toString();\n        }\n    }\n\n    createChildElement(value: TDataValue) {\n        const params = {\n            cellController: this,\n            dataModel: this.dataModel,\n            selection: this.selection,\n            type: this._type,\n            key: this._key,\n            value: value,\n        };\n\n        switch (this._type) {\n            case \"text\":\n            case \"number\":\n                return new TextNumberCell(params);\n            case \"checkbox\":\n                return new CheckboxCell(params);\n            case \"select\":\n                return new SelectCell(params);\n            case \"datalist\":\n                return new DatalistCell(params);\n            case \"datalist-fix\":\n                const isFix = true;\n                return new DatalistCell(params, isFix);\n            default: // \"string\":\n                return new StringCell(params);\n        }\n    }\n\n    bindEvents() {\n        if (this._cell) {\n            this._cell.addEventListener(\"click\", this.onClick.bind(this));\n            this._cell.addEventListener(\"dblclick\", this.onDBClick.bind(this));\n\n            // select range\n            this._cell.addEventListener(\n                \"mousedown\",\n                this.onMouseDown.bind(this)\n            );\n            this._cell.addEventListener(\n                \"mousemove\",\n                this.onMouseMove.bind(this)\n            );\n            this._cell.addEventListener(\"mouseup\", this.onMouseUp.bind(this));\n        }\n    }\n\n    onClick(e: MouseEvent) {\n        this.dataGrid.csvButtonVisible = false;\n\n        const cells = this.selection.selectedCells;\n        cells.forEach((cell) => {\n            (cell as IHTMLTableCellElementWithInstance).instance.readOnly =\n                true;\n        });\n\n        if (!this._cell) return;\n\n        if (e.shiftKey && cells.size > 0) {\n            this.selection.selectRange(Array.from(cells)[0], this._cell);\n        } else {\n            this.selection.selectCell(this._cell, e.shiftKey);\n        }\n    }\n\n    onDBClick() {\n        this.readOnly = false;\n        if (this._contentElement) {\n            this._contentElement.focus();\n        }\n    }\n\n    onMouseDown(e: MouseEvent) {\n        if (e.shiftKey || !this._cell) return;\n        this.selection.isRangeSelecting = true;\n        this.selection.rangeSelectingStart = this._cell;\n        this.selection.clearSelection();\n        this.selection.selectCell(this._cell);\n    }\n\n    onMouseMove(e: MouseEvent) {\n        if (\n            this.selection.isRangeSelecting &&\n            this.selection.rangeSelectingStart &&\n            this._cell\n        ) {\n            this.selection.selectRange(\n                this.selection.rangeSelectingStart,\n                this._cell\n            );\n        }\n    }\n\n    onMouseUp() {\n        this.selection.isRangeSelecting = false;\n    }\n}\n", "import DataGrid from \"./DataGrid\";\nimport DataModel from \"./models/DataModel\";\nimport Selection from \"./Selection\";\nimport Table from \"./Table\";\n\nexport default class Thead {\n    public dataModel: DataModel;\n    public tbody: HTMLElement | null = null;\n    public selection: Selection; // Define the correct type for selection\n    public tableController: Table;\n    public theadTr: HTMLTableRowElement;\n    private sortItem: string[];\n    private _headerOrders: string[];\n    private _isDragging: boolean;\n    private _draggingColumn: number | null;\n    private _activeSortButton: HTMLButtonElement | null;\n\n    constructor(\n        headerOrders: string[],\n        dataGrid: DataGrid,\n        tableController: Table\n    ) {\n        this.dataModel = dataGrid.dataModel;\n        if (dataGrid.tbody) this.tbody = dataGrid.tbody;\n        this.selection = dataGrid.selection;\n        this.tableController = tableController;\n        this.sortItem = tableController.sortItem;\n\n        this._headerOrders = headerOrders;\n        this._isDragging = false;\n        this._draggingColumn = null;\n        this._activeSortButton = null;\n\n        this.theadTr = this.createHeader();\n\n        return this;\n    }\n\n    get headerOrders(): string[] {\n        return this._headerOrders;\n    }\n\n    setHeaderOrders(): void {\n        const headers = this.theadTr.querySelectorAll(\"th\");\n        const columnOrder = Array.from(headers).map(\n            (th) => th.textContent || \"\"\n        );\n        this._headerOrders = columnOrder.slice(1);\n    }\n\n    createHeader(): HTMLTableRowElement {\n        const fragment = document.createDocumentFragment();\n\n        // \uBE48 th\n        const rowHeader = document.createElement(\"th\");\n        fragment.appendChild(rowHeader);\n\n        this._headerOrders.forEach((name) => {\n            const th = document.createElement(\"th\");\n            th.textContent = name.toString();\n\n            if (this.sortItem.includes(name)) {\n                const sortButton = this.createSortButton(\n                    name as keyof IDataItem\n                );\n                th.appendChild(sortButton);\n            }\n\n            this.addThEvents(th);\n            fragment.appendChild(th);\n        });\n\n        const tr = document.createElement(\"tr\");\n        tr.appendChild(fragment);\n\n        return tr;\n    }\n\n    addThEvents(th: HTMLElement): void {\n        [\"mousedown\", \"mousemove\", \"mouseup\"].forEach((event) => {\n            th.addEventListener(event, (e) =>\n                this.handleThEvents(th, event, e as MouseEvent)\n            );\n        });\n    }\n\n    handleThEvents(\n        thElement: HTMLElement,\n        eventType: string,\n        e: MouseEvent\n    ): void {\n        const colIndex =\n            Array.from(thElement.parentNode!.children).indexOf(thElement) - 1;\n\n        if (eventType === \"mousedown\") {\n            this.handleThMouseDown(thElement, colIndex);\n        } else if (eventType === \"mousemove\" && this._isDragging) {\n            this.handleThMouseMove(colIndex);\n        } else if (eventType === \"mouseup\" && this._isDragging) {\n            this.handleThMouseUp(thElement);\n        }\n    }\n\n    handleThMouseDown(thElement: HTMLElement, colIndex: number): void {\n        this.selection.clearSelection();\n        if (colIndex >= 0) {\n            this._isDragging = true;\n            this._draggingColumn = colIndex;\n            this.selectColumn(colIndex);\n            thElement.classList.add(\"dragging\");\n        }\n    }\n\n    handleThMouseMove(colIndex: number): void {\n        if (colIndex >= 0 && colIndex !== this._draggingColumn) {\n            this.moveColumn(colIndex);\n            this._draggingColumn = colIndex;\n        }\n    }\n\n    handleThMouseUp(thElement: HTMLElement): void {\n        this._isDragging = false;\n        this._draggingColumn = null;\n        thElement.classList.remove(\"dragging\");\n    }\n\n    selectColumn(col: number): void {\n        const cells =\n            this.tbody && this.tbody.querySelectorAll(`td[data-col=\"${col}\"]`);\n        cells &&\n            cells.forEach((cell) =>\n                this.selection.selectCell(\n                    cell as IHTMLTableCellElementWithInstance,\n                    true\n                )\n            );\n\n        const th = this.theadTr.querySelector(`th:nth-child(${col + 2})`);\n        if (th) {\n            th.classList.add(\"selected-th\");\n        }\n    }\n\n    moveColumn(to: number): void {\n        const from = this._draggingColumn!;\n        const rows = this.tbody?.querySelectorAll(\"tr\");\n\n        rows &&\n            rows.forEach((row) => {\n                const cells = Array.from(row.children);\n                const fromCell = cells[\n                    from + 1\n                ] as IHTMLTableCellElementWithInstance;\n                const toCell = cells[\n                    to + 1\n                ] as IHTMLTableCellElementWithInstance;\n\n                row.insertBefore(\n                    fromCell,\n                    to < from ? toCell : toCell.nextSibling\n                );\n\n                if (fromCell.instance) fromCell.instance.col = to;\n                if (toCell.instance) toCell.instance.col = from;\n\n                // \uC774\uC720\uB97C \uC54C \uC218 \uC5C6\uB294 DOM \uBC84\uADF8\n                const fromElement = fromCell.instance.contentElement;\n                if (fromElement && fromElement.children.length > 1) {\n                    fromElement.removeChild(fromElement.children[0]);\n                }\n            });\n\n        const headers = this.theadTr.querySelectorAll(\"th\");\n        const fromHeader = headers[from + 1];\n        const toHeader = headers[to + 1];\n        this.theadTr.insertBefore(\n            fromHeader,\n            to < from ? toHeader : toHeader.nextSibling\n        );\n\n        this.setHeaderOrders();\n    }\n\n    createSortButton(columnName: keyof IDataItem) {\n        const button = document.createElement(\"button\");\n        button.type = \"button\";\n        button.dataset.sort = \"\";\n        button.className = \"sort-button\";\n        button.addEventListener(\n            \"click\",\n            this.onClickSortButton.bind(this, columnName, button)\n        );\n        return button;\n    }\n\n    onClickSortButton(columnName: keyof IDataItem, button: HTMLButtonElement) {\n        if (this._activeSortButton && this._activeSortButton !== button) {\n            this._activeSortButton.dataset.sort = \"\";\n        }\n\n        const sortOrder = this.getNextSortOrder(button.dataset.sort || \"\");\n        const sortedData = this.sortData(columnName, sortOrder);\n        const reorderedData = this.sortDataByColumnOrder(sortedData);\n\n        button.dataset.sort = sortOrder;\n        this.tableController.renderTbody(reorderedData);\n\n        this._activeSortButton = button;\n    }\n\n    getNextSortOrder(currentOrder: string): string {\n        return currentOrder === \"\"\n            ? \"ascending\"\n            : currentOrder === \"ascending\"\n            ? \"descending\"\n            : \"\";\n    }\n\n    sortData(columnName: keyof IDataItem, sortOrder: string) {\n        if (!sortOrder) return [...this.dataModel.records];\n\n        return [...this.dataModel.records].sort((a, b) => {\n            if (a[columnName] < b[columnName])\n                return sortOrder === \"ascending\" ? -1 : 1;\n            if (a[columnName] > b[columnName])\n                return sortOrder === \"ascending\" ? 1 : -1;\n            return 0;\n        });\n    }\n\n    sortDataByColumnOrder(sortData: IDataItem[]) {\n        return sortData.map((item) => {\n            let reorderedItem = {}; //\n            this._headerOrders.forEach((columnName) => {\n                if (columnName in item) {\n                    const key = columnName as keyof IDataItem;\n                    reorderedItem = {\n                        ...reorderedItem,\n                        [key]: item[key],\n                    };\n                }\n            });\n            return reorderedItem as IDataItem;\n        });\n    }\n}\n", "import { FIELD_DEFINITIONS } from \"../data/fieldDefinitions\"; // fieldDefinitions\uC5D0 \uD0C0\uC785 \uC815\uC758 \uCD94\uAC00\nimport Cell from \"./Cell\";\nimport Thead from \"./Thead\";\nimport DataGrid from \"./DataGrid\";\nimport Selection from \"./Selection\";\nimport DataModel from \"./models/DataModel\";\n\ninterface TableParams {\n    dataGrid: DataGrid;\n    sortItem: string[];\n}\n\nexport default class Table {\n    public dataGrid: DataGrid;\n    public dataModel: DataModel;\n    public selection: Selection;\n    public sortItem: string[];\n    public theadController: Thead | null;\n\n    private _fieldDefinitions: IFieldDefinition[];\n    private _selectedTr: HTMLTableRowElement | null;\n\n    constructor(dataGrid: DataGrid, sortItem: string[]) {\n        this.dataGrid = dataGrid;\n        this.dataModel = dataGrid.dataModel;\n        this.selection = dataGrid.selection;\n        this.sortItem = sortItem;\n        this.theadController = null;\n\n        this._fieldDefinitions = FIELD_DEFINITIONS;\n        this._selectedTr = null;\n\n        this.render();\n    }\n\n    render() {\n        // datalist dom\uC5D0 \uC0DD\uC131\n        this.checkAndCreateDatalists();\n\n        this.renderTable(this.dataModel.records);\n    }\n\n    renderTable(data: IDataItem[]) {\n        this.theadController = new Thead(\n            this._fieldDefinitions.map((d) => d.key),\n            this.dataGrid,\n            this\n        );\n        this.dataGrid.thead?.appendChild(this.theadController.theadTr);\n\n        this.renderTbody(data);\n    }\n\n    renderTbody(data: IDataItem[]) {\n        const bodyFragment = this.createTbody(data);\n        if (!this.dataGrid.tbody) return;\n        this.dataGrid.tbody.innerHTML = \"\";\n        this.dataGrid.tbody.appendChild(bodyFragment);\n    }\n\n    createTbody(data: IDataItem[]): DocumentFragment {\n        const fragment = new DocumentFragment();\n        data.forEach((rowData, rowIndex) => {\n            const row = this.createRow(rowData, rowIndex);\n            fragment.appendChild(row);\n        });\n        return fragment;\n    }\n\n    createRow(rowData: IDataItem, rowIndex: number): HTMLTableRowElement {\n        const row = document.createElement(\"tr\");\n        const rowHeader = this.createRowHeader(rowIndex);\n        row.appendChild(rowHeader);\n\n        this.theadController?.headerOrders.forEach((columnKey, colIndex) => {\n            const field = this._fieldDefinitions.find(\n                (d) => d.key === columnKey\n            );\n            const type = field ? field.type : \"string\";\n            const key = columnKey as keyof IDataItem;\n            const params = {\n                row: rowIndex,\n                col: colIndex,\n                key: columnKey,\n                type: type,\n                value: rowData[key],\n            };\n\n            // Cell \uC0DD\uC131 \uBC0F \uCD94\uAC00\n            const cell = new Cell(this, params, row);\n            if (cell.cellElement) {\n                row.appendChild(cell.cellElement);\n            }\n        });\n\n        return row;\n    }\n\n    createRowHeader(rowIndex: number): HTMLTableHeaderCellElement {\n        const rowHeader = document.createElement(\"th\");\n        rowHeader.tabIndex = 0;\n        rowHeader.textContent = (rowIndex + 1).toString();\n        rowHeader.addEventListener(\"click\", this.onClickRowHeader.bind(this));\n        return rowHeader;\n    }\n\n    onClickRowHeader(e: MouseEvent): void {\n        const clickedRow = (e.target as HTMLElement).closest(\"tr\");\n\n        if (this._selectedTr) {\n            this._selectedTr.classList.remove(\"selected-tr\");\n        }\n\n        if (this._selectedTr !== clickedRow) {\n            this._selectedTr = clickedRow as HTMLTableRowElement;\n            this._selectedTr.classList.add(\"selected-tr\");\n        } else {\n            this._selectedTr = null; // Deselect if the same row is clicked\n        }\n    }\n\n    checkAndCreateDatalists(): Record<string, HTMLDataListElement> {\n        return this._fieldDefinitions\n            .filter(\n                ({ type }) => type === \"datalist\" || type === \"datalist-fix\"\n            )\n            .reduce((result, { key }) => {\n                result[key] = this.createDataList(key);\n                return result;\n            }, {} as Record<string, HTMLDataListElement>);\n    }\n\n    createDataList(key: string): HTMLDataListElement {\n        const data = this.dataModel.records.map(\n            (item: IDataItem) => item[key as keyof IDataItem]\n        );\n        const datalist = document.createElement(\"datalist\");\n        datalist.id = `datalist-${key}`;\n        data.forEach((item) => {\n            const option = document.createElement(\"option\");\n            option.value = item.toString();\n            datalist.appendChild(option);\n        });\n        this.dataGrid.appendChild(datalist);\n        return datalist;\n    }\n}\n", "import DataGrid from \"../DataGrid\";\nimport Selection from \"../Selection\";\n\nfunction onCsvButtonClick(\n    this: DataGrid,\n    selection: Selection,\n    csvButton: HTMLButtonElement\n) {\n    console.log(\"onCsvButtonClick\");\n    const sortedCells = sortSelectedCells(selection.selectedCells);\n\n    const { rows, selectedCols } = organizeSelectedCells(sortedCells);\n\n    const filteredRows = filterEmptyRows(rows);\n\n    const csvText = convertToCsv(filteredRows, selectedCols, this);\n\n    downloadCSV(csvText, \"data.csv\");\n\n    csvButton.hidden = true;\n}\n\nfunction sortSelectedCells(\n    selectedCells: Set<IHTMLTableCellElementWithInstance>\n) {\n    return [...selectedCells].sort((a, b) => {\n        const aRow = a.instance.row;\n        const aCol = a.instance.col;\n        const bRow = b.instance.row;\n        const bCol = b.instance.col;\n\n        return aRow === bRow ? aCol - bCol : aRow - bRow;\n    });\n}\n\nfunction organizeSelectedCells(\n    sortedCells: IHTMLTableCellElementWithInstance[]\n) {\n    const rows: string[][] = [];\n    const selectedCols = new Set<number>();\n\n    sortedCells.forEach((cell) => {\n        const row = cell.instance.row;\n        const col = cell.instance.col;\n        let value = cell.instance.value;\n\n        if (cell.instance.type === \"checkbox\") {\n            // value\uAC00 boolean\uC774\uBA74 true/false\uB97C \uBB38\uC790\uC5F4\uB85C \uBCC0\uD658\n\n            if (typeof value === \"boolean\") {\n                value = value ? \"true\" : \"false\";\n            }\n\n            // value\uAC00 \"on\"\uC774\uBA74 \"true\", \uADF8 \uC678\uB294 \"false\"\uB85C \uCC98\uB9AC\n            else if (value === \"true\" || value === \"on\") {\n                value = \"true\";\n            } else {\n                value = \"false\";\n            }\n        }\n\n        // if (value === false || value === \"\") {\n        //     value = \"false\";\n        // } else if (value === true || value === \"on\") {\n        //     value = \"true\";\n        // }\n\n        if (!rows[row]) {\n            rows[row] = [];\n        }\n\n        if (value !== \"\") {\n            rows[row][col] = value.toString();\n            selectedCols.add(col);\n        }\n    });\n\n    return { rows, selectedCols };\n}\n\nfunction filterEmptyRows(rows: string[][]): string[][] {\n    return rows.filter(\n        (row) => row !== undefined && row.some((cell) => cell !== undefined)\n    );\n}\n\nfunction convertToCsv(\n    filteredRows: string[][],\n    selectedCols: Set<number>,\n    dataGrid: DataGrid\n): string {\n    const headers = extractHeaders(selectedCols, dataGrid);\n    const csvRows = filteredRows.map((row, rowIndex) =>\n        [\n            rowIndex + 1,\n            ...Array.from(selectedCols)\n                .sort((a, b) => a - b)\n                .map((col) => row[col] || \"\"),\n        ].join(\",\")\n    );\n\n    return [headers.join(\",\"), ...csvRows].join(\"\\n\");\n}\n\nfunction extractHeaders(\n    selectedCols: Set<number>,\n    dataGrid: DataGrid\n): string[] {\n    const headers = Array.from(dataGrid.querySelectorAll(\"thead th\")).map(\n        (th) => th.textContent || \"\"\n    );\n    return [\n        \"\",\n        ...Array.from(selectedCols)\n            .sort((a, b) => a - b)\n            .map((colIndex) => headers[colIndex + 1]),\n    ];\n}\n\nfunction downloadCSV(csv: string, filename: string): void {\n    const csvFile = new Blob([csv], { type: \"text/csv\" });\n    const downloadLink = document.createElement(\"a\");\n\n    downloadLink.download = filename;\n    downloadLink.href = window.URL.createObjectURL(csvFile);\n    downloadLink.style.display = \"none\";\n    document.body.appendChild(downloadLink);\n\n    downloadLink.click();\n    document.body.removeChild(downloadLink);\n}\n\nexport default { onCsvButtonClick };\n", "import Selection from \"../Selection\";\nimport DataModel from \"../models/DataModel\";\n\nfunction copyCells(selection: Selection) {\n    const { copiedCell, selectedCells } = selection;\n\n    if (copiedCell.length > 0) {\n        clearCopiedCell(selection);\n    }\n\n    const clipboardText =\n        selectedCells.size === 1\n            ? [...selectedCells][0].instance.value.toString()\n            : selection.currentSelectionRange\n                  .map((row) =>\n                      row\n                          .map((cell) =>\n                              (\n                                  cell as IHTMLTableCellElementWithInstance\n                              ).instance.value.toString()\n                          )\n                          .join(\"\\t\")\n                  )\n                  .join(\"\\n\");\n\n    navigator.clipboard\n        .writeText(clipboardText)\n        .then(() => console.log(\"Data copied to clipboard\"))\n        .catch((err) =>\n            console.error(\"Failed to copy data to clipboard: \", err)\n        );\n\n    selectedCells.forEach((cell) => cell.classList.add(\"copiedCell\"));\n    selection.copiedCell = [...selectedCells];\n}\n\nfunction clearCopiedCell(selection: Selection): void {\n    selection.copiedCell.forEach((cell) => cell.classList.remove(\"copiedCell\"));\n    selection.copiedCell = [];\n}\n\nfunction pasteCells(\n    table: HTMLTableElement,\n    dataModel: DataModel,\n    selection: Selection\n) {\n    navigator.clipboard\n        .readText()\n        .then((text) => {\n            const [firstSelectedCell] = selection.selectedCells;\n            const firstRow = Number(firstSelectedCell.dataset.row);\n            const firstCol = Number(firstSelectedCell.dataset.col);\n            const data = parseClipboardData(text);\n\n            data.forEach((row, rowIndex) => {\n                const targetRow = firstRow + rowIndex;\n\n                // let pastedData: IDataItem = {\n                //     id: getId(table, targetRow) || \"\", // \uAE30\uBCF8\uAC12 \uC81C\uACF5\n                //     name: \"\", // \uC5EC\uAE30\uC5D0 \uB098\uBA38\uC9C0 \uD544\uB4DC\uB4E4\uB3C4 \uCD94\uAC00\uD574\uC57C \uD569\uB2C8\uB2E4.\n                //     description: \"\",\n                //     quantity: 0,\n                //     food: \"\",\n                //     food_fix: \"\",\n                //     vegetable: \"\",\n                //     option: false,\n                //     ref: \"\",\n                // };\n\n                const targetData = dataModel.records.find(\n                    (item) => item.id === getId(table, targetRow)\n                ) as IDataItem;\n\n                let parsedData = { ...targetData };\n                row.forEach((value, colIndex) => {\n                    const targetCell = findTargetCell(\n                        table,\n                        targetRow,\n                        firstCol + colIndex\n                    ) as IHTMLTableCellElementWithInstance | null;\n\n                    if (!targetCell || !targetCell.instance) return;\n\n                    targetCell.instance.value = value;\n                    const parsedValue = targetCell.instance.value;\n\n                    if (parsedValue) {\n                        if (targetCell.instance.type === \"string\") return;\n                        const key = targetCell.instance.key as keyof IDataItem;\n\n                        parsedData = {\n                            ...targetData,\n                            [key]: parsedValue.toString(),\n                        };\n                    }\n\n                    console.log(parsedValue);\n\n                    highlightCell(targetCell, selection.selectedCells);\n                });\n\n                if (parsedData && parsedData.id) {\n                    dataModel.updateRecordFields(parsedData);\n                }\n            });\n        })\n        .catch((err) =>\n            console.error(\"Failed to read clipboard contents: \", err)\n        );\n}\n\nfunction parseClipboardData(text: string): string[][] {\n    return text.split(\"\\n\").map((row) => row.split(\"\\t\"));\n}\n\nfunction findTargetCell(\n    table: HTMLTableElement,\n    row: number,\n    col: number\n): HTMLTableCellElement | null {\n    return table.querySelector(\n        `tbody td[data-row=\"${row}\"][data-col=\"${col}\"]`\n    );\n}\n\nfunction highlightCell(\n    cell: HTMLTableCellElement,\n    selectedCells: Set<HTMLTableCellElement>\n): void {\n    selectedCells.add(cell);\n    cell.classList.add(\"selected\");\n}\n\nfunction getId(table: HTMLTableElement, index: number) {\n    const tr = table.querySelectorAll(\"tbody tr\")[index] as HTMLElement;\n    if (!tr) return null;\n    return tr.dataset.id;\n}\n\nexport default {\n    copyCells,\n    pasteCells,\n};\n", "import { INITIAL_DATA } from \"../data/data\";\nimport Selection from \"./Selection\";\nimport DataModel from \"./models/DataModel\";\nimport Table from \"./Table\";\nimport handleCsvButton from \"./helpers/handleCsvButton\";\nimport clipboard from \"./helpers/clipboard\";\n\nexport default class DataGrid extends HTMLElement {\n    public dataModel: DataModel;\n    public selection: Selection;\n    public table: HTMLTableElement;\n    public thead: HTMLTableSectionElement | null;\n    public tbody: HTMLTableSectionElement | null;\n    public csvButton: HTMLButtonElement | null;\n    public dataButton: HTMLButtonElement | null;\n    public isComposing: boolean;\n    public tableCP: Table | null;\n\n    constructor() {\n        super();\n\n        this.dataModel = new DataModel();\n        this.selection = new Selection(this);\n\n        this.table = this.querySelector(\"table\")!;\n        this.thead = this.querySelector(\"thead\");\n        this.tbody = this.querySelector(\"tbody\");\n        this.csvButton = this.querySelector(\n            \".csv-button\"\n        ) as HTMLButtonElement | null;\n        this.dataButton = this.querySelector(\n            \".data-button\"\n        ) as HTMLButtonElement | null;\n\n        this.isComposing = false;\n        this.tableCP = null;\n    }\n\n    async connectedCallback() {\n        try {\n            this.dataModel.records = await this.loadData();\n\n            const sortItem = [\"id\", \"name\"];\n            this.tableCP = new Table(this, sortItem);\n\n            const firstCell = this.tbody?.querySelector(\n                \"td\"\n            ) as IHTMLTableCellElementWithInstance;\n            if (firstCell) {\n                this.selection.selectCell(firstCell); // \uCD08\uAE30 \uC120\uD0DD\n            }\n\n            this.bindEvents();\n        } catch (error) {\n            console.error(\"Data loading failed\", error);\n        }\n    }\n\n    set csvButtonVisible(value: boolean) {\n        if (this.csvButton) {\n            this.csvButton.hidden = !value;\n        }\n    }\n\n    async loadData(): Promise<IDataItem[]> {\n        return new Promise((resolve) => {\n            setTimeout(() => {\n                resolve(INITIAL_DATA);\n            }, 100);\n        });\n    }\n\n    bindEvents() {\n        document.addEventListener(\"copy\", this.onCopy.bind(this));\n        document.addEventListener(\"paste\", this.onPaste.bind(this));\n        if (this.csvButton) {\n            this.csvButton.addEventListener(\n                \"click\",\n                handleCsvButton.onCsvButtonClick.bind(\n                    this,\n                    this.selection,\n                    this.csvButton\n                )\n            );\n        }\n\n        if (this.dataButton) {\n            this.dataButton.addEventListener(\n                \"click\",\n                this.onClickShowButton.bind(this)\n            );\n        }\n\n        document.addEventListener(\"keydown\", this.onKeydown.bind(this));\n\n        this.addEventListener(\"click\", this.onClickDocument.bind(this));\n    }\n\n    onKeydown(e: KeyboardEvent) {\n        if (e.key === \"f\" && (e.ctrlKey || e.metaKey)) {\n            e.preventDefault();\n            const searchText = prompt(\"Enter text to search:\");\n            if (searchText) {\n                this.highlightSearchResults(searchText);\n            }\n        }\n    }\n\n    onCopy(e: ClipboardEvent) {\n        e.preventDefault();\n        clipboard.copyCells(this.selection);\n    }\n\n    onPaste(e: ClipboardEvent) {\n        e.preventDefault();\n        clipboard.pasteCells(this.table, this.dataModel, this.selection);\n    }\n\n    onClickShowButton(e: MouseEvent) {\n        const pre = this.querySelector(\"#data-area pre\");\n        if (pre) {\n            pre.textContent = JSON.stringify(this.dataModel.records, null, 2);\n        }\n    }\n\n    onClickDocument(e: MouseEvent) {\n        const td = (e.target as HTMLElement).closest(\"td\");\n        if (!td) return;\n        const classList = td.classList;\n        if (!classList.contains(\"highlight\")) {\n            this.clearHighlights();\n        }\n    }\n\n    highlightSearchResults(searchText: string) {\n        this.clearHighlights();\n\n        const cells = this.tbody?.querySelectorAll(\n            \"td\"\n        ) as NodeListOf<IHTMLTableCellElementWithInstance>;\n        cells?.forEach((cell) => {\n            const instance = cell.instance;\n            if (instance?.value?.toString().includes(searchText)) {\n                cell.classList.add(\"highlight\");\n            }\n        });\n    }\n\n    clearHighlights() {\n        const highlightedCells = this.tbody?.querySelectorAll(\".highlight\");\n        highlightedCells?.forEach((cell) => {\n            cell.classList.remove(\"highlight\");\n        });\n    }\n}\n\n// Make sure to declare or import types for `INITIAL_DATA`, `clipboard`, and `handleCsvButton`.\n", "import CheckboxCell from \"../components/dataCells/CheckboxCell\";\nimport DatalistCell from \"../components/dataCells/DatalistCell\";\nimport SelectCell from \"../components/dataCells/SelectCell\";\nimport StringCell from \"../components/dataCells/StringCell\";\nimport TextNumberCell from \"../components/dataCells/TextNumberCell\";\nimport DataGrid from \"../components/DataGrid\";\n\ncustomElements.define(\"data-grid\", DataGrid);\ncustomElements.define(\"string-cell\", StringCell);\ncustomElements.define(\"text-number-cell\", TextNumberCell);\ncustomElements.define(\"select-cell\", SelectCell);\ncustomElements.define(\"checkbox-cell\", CheckboxCell);\ncustomElements.define(\"datalist-cell\", DatalistCell);\n"],
  "mappings": "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",
  "names": ["DataCellBase", "params", "value", "arg", "_a", "newValue", "isEditing", "arrowKeys", "nextCell", "shiftKey", "id", "row", "CheckboxCell", "DataCellBase", "params", "value", "input", "DatalistCell", "DataCellBase", "params", "isFix", "keyString", "input", "SelectCell", "DataCellBase", "params", "value", "select", "fragment", "data", "optionElement", "text", "option", "nextCell", "StringCell", "DataCellBase", "params", "arg", "span", "TextNumberCell", "DataCellBase", "params", "input", "INITIAL_DATA", "Selection", "dataGrid", "value", "cell", "append", "row", "col", "_a", "nextCell", "startCell", "endCell", "startRow", "startCol", "endRow", "endCol", "minRow", "maxRow", "minCol", "maxCol", "newSelection", "rowSelection", "selectedTh", "DataModel", "initialData", "item", "__spreadValues", "newData", "keyString", "r", "id", "key", "value", "index", "__spreadProps", "updateData", "_a", "fieldsToUpdate", "__objRest", "recordIndex", "FIELD_DEFINITIONS", "Cell", "tableController", "params", "row", "value", "arg", "cell", "childElement", "TextNumberCell", "CheckboxCell", "SelectCell", "DatalistCell", "isFix", "StringCell", "e", "cells", "Thead", "headerOrders", "dataGrid", "tableController", "headers", "columnOrder", "th", "fragment", "rowHeader", "name", "sortButton", "tr", "event", "e", "thElement", "eventType", "colIndex", "col", "cells", "cell", "to", "_a", "from", "rows", "row", "fromCell", "toCell", "fromElement", "fromHeader", "toHeader", "columnName", "button", "sortOrder", "sortedData", "reorderedData", "currentOrder", "a", "b", "sortData", "item", "reorderedItem", "key", "__spreadProps", "__spreadValues", "Table", "dataGrid", "sortItem", "FIELD_DEFINITIONS", "data", "_a", "Thead", "d", "bodyFragment", "fragment", "rowData", "rowIndex", "row", "rowHeader", "columnKey", "colIndex", "field", "type", "params", "cell", "Cell", "e", "clickedRow", "result", "key", "item", "datalist", "option", "onCsvButtonClick", "selection", "csvButton", "sortedCells", "sortSelectedCells", "rows", "selectedCols", "organizeSelectedCells", "filteredRows", "filterEmptyRows", "csvText", "convertToCsv", "downloadCSV", "selectedCells", "a", "b", "aRow", "aCol", "bRow", "bCol", "cell", "row", "col", "value", "dataGrid", "headers", "extractHeaders", "csvRows", "rowIndex", "th", "colIndex", "csv", "filename", "csvFile", "downloadLink", "handleCsvButton_default", "copyCells", "selection", "copiedCell", "selectedCells", "clearCopiedCell", "clipboardText", "row", "cell", "err", "pasteCells", "table", "dataModel", "text", "firstSelectedCell", "firstRow", "firstCol", "parseClipboardData", "rowIndex", "targetRow", "targetData", "item", "getId", "parsedData", "__spreadValues", "value", "colIndex", "targetCell", "findTargetCell", "parsedValue", "key", "__spreadProps", "highlightCell", "col", "index", "tr", "clipboard_default", "DataGrid", "DataModel", "Selection", "__async", "_a", "sortItem", "Table", "firstCell", "error", "value", "resolve", "INITIAL_DATA", "handleCsvButton_default", "searchText", "clipboard_default", "pre", "td", "cells", "cell", "instance", "highlightedCells", "DataGrid", "StringCell", "TextNumberCell", "SelectCell", "CheckboxCell", "DatalistCell"]
}
